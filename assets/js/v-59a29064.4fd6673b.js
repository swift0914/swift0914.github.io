"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[674],{4943:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t={key:"v-59a29064",path:"/js/base/type.html",title:"JS 判断类型方式",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"1、typeof",slug:"_1、typeof",children:[]},{level:2,title:"2、instanceof",slug:"_2、instanceof",children:[]},{level:2,title:"3、toString",slug:"_3、tostring",children:[]},{level:2,title:"4、仿 jquery",slug:"_4、仿-jquery",children:[]}],filePathRelative:"js/base/type.md",git:{updatedTime:1593565978e3,contributors:[{name:"swift",email:"962498816@qq.com",commits:2}]}}},2498:(n,s,a)=>{a.r(s),a.d(s,{default:()=>p});const t=(0,a(6252).uE)('<h1 id="js-判断类型方式" tabindex="-1"><a class="header-anchor" href="#js-判断类型方式" aria-hidden="true">#</a> JS 判断类型方式</h1><h2 id="_1、typeof" tabindex="-1"><a class="header-anchor" href="#_1、typeof" aria-hidden="true">#</a> 1、typeof</h2><blockquote><p>适用场景</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">typeof</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//number</span>\n<span class="token keyword">typeof</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">;</span> <span class="token comment">//string</span>\n<span class="token keyword">typeof</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// symbol</span>\n<span class="token keyword">typeof</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span> <span class="token comment">//undefined</span>\n<span class="token keyword">typeof</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">//boolean</span>\n\n<span class="token keyword">typeof</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// function</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><blockquote><p>不适用场景 引用类型除了 <code>function</code> 其余都判定为 <code>object</code></p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">typeof</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//object</span>\n<span class="token keyword">typeof</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">//object</span>\n<span class="token keyword">typeof</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// object</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="custom-container warning"><p class="custom-container-title">注意</p><p><strong>另外 typeof null ---&gt; object</strong></p></div><h2 id="_2、instanceof" tabindex="-1"><a class="header-anchor" href="#_2、instanceof" aria-hidden="true">#</a> 2、instanceof</h2><blockquote><p><code>instanceof</code> 操作符可以帮助我们判断引用类型具体是什么类型的对象</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n<span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">Date</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n<span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">RegExp</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><code>[] instanceof Array</code> 实际上是判断 <code>Array.prototype</code> 是否在[]的原型链上,所以，使用 <code>instanceof</code> 来检测数据类型，不会很准确，这不是它设计的初衷</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">instanceof</span> <span class="token class-name">Object</span> <span class="token comment">// true</span>\n<span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token keyword">instanceof</span> <span class="token class-name">Object</span> <span class="token comment">// true</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="custom-container warning"><p class="custom-container-title">注意</p><p><strong>另外，使用 <code>instanceof</code> 也不能检测基本数据类型，所以 <code>instanceof</code> 并不是一个很好的选择。</strong></p></div><h2 id="_3、tostring" tabindex="-1"><a class="header-anchor" href="#_3、tostring" aria-hidden="true">#</a> 3、toString</h2><blockquote><p>我们可以直接调用 <code>Object</code> 原型上未被覆盖的 <code>toString()</code>方法，使用 <code>call</code> 来改变 <code>this</code> 指向来达到我们想要的效果。</p></blockquote><table><thead><tr><th>调用</th><th style="text-align:center;">结果</th></tr></thead><tbody><tr><td>Object.prototype.toString.call(true)</td><td style="text-align:center;">[object Boolean]</td></tr><tr><td>Object.prototype.toString.call(1)</td><td style="text-align:center;">[object Number]</td></tr><tr><td>Object.prototype.toString.call(&#39;swift&#39;)</td><td style="text-align:center;">[object String]</td></tr><tr><td>Object.prototype.toString.call(null)</td><td style="text-align:center;">[object Null]</td></tr><tr><td>Object.prototype.toString.call(undefined)</td><td style="text-align:center;">[object Undefined]</td></tr><tr><td>Object.prototype.toString.call(Symbol())</td><td style="text-align:center;">[object Symbol]</td></tr><tr><td>Object.prototype.toString.call({})</td><td style="text-align:center;">[object Object]</td></tr><tr><td>Object.prototype.toString.call(function(){})</td><td style="text-align:center;">[object Function]</td></tr><tr><td>Object.prototype.toString.call([])</td><td style="text-align:center;">[object Array]</td></tr><tr><td>Object.prototype.toString.call(new Error())</td><td style="text-align:center;">[object Error]</td></tr><tr><td>Object.prototype.toString.call(new RegExp())</td><td style="text-align:center;">[object RegExp]</td></tr><tr><td>Object.prototype.toString.call(Math)</td><td style="text-align:center;">[object Math]</td></tr><tr><td>Object.prototype.toString.call(JSON)</td><td style="text-align:center;">[object JSON]</td></tr><tr><td>Object.prototype.toString.call(window)</td><td style="text-align:center;">[object Window]</td></tr></tbody></table><h2 id="_4、仿-jquery" tabindex="-1"><a class="header-anchor" href="#_4、仿-jquery" aria-hidden="true">#</a> 4、仿 jquery</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> class2type <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 生成class2type映射</span>\n<span class="token string">&quot;Boolean Number String Function Array Date RegExp Object Error Null Undefined&quot;</span>\n    <span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        class2type<span class="token punctuation">[</span><span class="token string">&quot;[object &quot;</span> <span class="token operator">+</span> item <span class="token operator">+</span> <span class="token string">&quot;]&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> item<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// typeof 除了引用类型都可以正确判断</span>\n<span class="token keyword">let</span> <span class="token function-variable function">type</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token comment">// IE6 undefined和null Object.prototype.toString.call()都返回 [object Object] 需要做兼容</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> obj <span class="token operator">+</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token keyword">typeof</span> obj <span class="token operator">===</span> <span class="token string">&quot;object&quot;</span> <span class="token operator">||</span> <span class="token keyword">typeof</span> obj <span class="token operator">===</span> <span class="token string">&quot;function&quot;</span>\n        <span class="token operator">?</span> class2type<span class="token punctuation">[</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token string">&quot;object&quot;</span>\n        <span class="token operator">:</span> <span class="token keyword">typeof</span> obj<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//object</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// null</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div>',18),e={},p=(0,a(3744).Z)(e,[["render",function(n,s){return t}]])},3744:(n,s)=>{s.Z=(n,s)=>{for(const[a,t]of s)n[a]=t;return n}}}]);