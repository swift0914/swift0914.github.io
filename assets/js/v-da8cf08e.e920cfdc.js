"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[974],{8274:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-da8cf08e",path:"/js/advanced/new.html",title:"手写实现 new",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"举个例子",slug:"举个例子",children:[]},{level:2,title:"实现功能",slug:"实现功能",children:[]},{level:2,title:"初步实现 new",slug:"初步实现-new",children:[]},{level:2,title:"完善 - 构造函数有返回值的情况",slug:"完善-构造函数有返回值的情况",children:[]}],filePathRelative:"js/advanced/new.md",git:{updatedTime:1615433296e3,contributors:[{name:"swift",email:"962498816@qq.com",commits:1}]}}},858:(n,s,a)=>{a.r(s),a.d(s,{default:()=>e});const p=(0,a(6252).uE)('<h1 id="手写实现-new" tabindex="-1"><a class="header-anchor" href="#手写实现-new" aria-hidden="true">#</a> 手写实现 new</h1><blockquote><p>new 运算符创建了一个用户定义的某种对象类型的实例，或者具有构造函数的内置对象类型之一。</p></blockquote><h2 id="举个例子" tabindex="-1"><a class="header-anchor" href="#举个例子" aria-hidden="true">#</a> 举个例子</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Coder</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>habit <span class="token operator">=</span> <span class="token string">&quot;coding&quot;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token class-name">Coder</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>strength <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>\n<span class="token class-name">Coder</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">say</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;name,&quot;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">var</span> coder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Coder</span><span class="token punctuation">(</span><span class="token string">&quot;swift&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>coder<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// swift</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>coder<span class="token punctuation">.</span>habit<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// coding</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>coder<span class="token punctuation">.</span>strength<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 30</span>\ncoder<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h2 id="实现功能" tabindex="-1"><a class="header-anchor" href="#实现功能" aria-hidden="true">#</a> 实现功能</h2><ul><li>①coder 实例可以访问到 构造函数内部的属性。</li><li>②coder 实例可以访问到 构造函数原型上的属性和方法。</li></ul><h2 id="初步实现-new" tabindex="-1"><a class="header-anchor" href="#初步实现-new" aria-hidden="true">#</a> 初步实现 new</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">newFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建空对象</span>\n  <span class="token keyword">var</span> Consturctor <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 参数第一个为构造函数</span>\n  obj<span class="token punctuation">.</span>__proto__ <span class="token operator">=</span> <span class="token class-name">Consturctor</span><span class="token punctuation">.</span>prototype<span class="token punctuation">;</span> <span class="token comment">// 实例 __proto__ 属性指向构造函数的原型对象上  ②</span>\n  <span class="token function">Consturctor</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ①</span>\n  <span class="token keyword">return</span> obj<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="完善-构造函数有返回值的情况" tabindex="-1"><a class="header-anchor" href="#完善-构造函数有返回值的情况" aria-hidden="true">#</a> 完善 - 构造函数有返回值的情况</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">newFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建空对象</span>\n  <span class="token keyword">var</span> Consturctor <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 参数第一个为构造函数</span>\n  obj<span class="token punctuation">.</span>__proto__ <span class="token operator">=</span> <span class="token class-name">Consturctor</span><span class="token punctuation">.</span>prototype<span class="token punctuation">;</span> <span class="token comment">// 实例 __proto__ 属性指向构造函数的原型对象上  ②</span>\n  <span class="token keyword">var</span> res <span class="token operator">=</span> <span class="token function">Consturctor</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ①</span>\n  <span class="token keyword">return</span> <span class="token keyword">typeof</span> res <span class="token operator">===</span> <span class="token string">&quot;object&quot;</span> <span class="token operator">?</span> res <span class="token operator">:</span> obj<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div>',10),t={},e=(0,a(3744).Z)(t,[["render",function(n,s){return p}]])},3744:(n,s)=>{s.Z=(n,s)=>{for(const[a,p]of s)n[a]=p;return n}}}]);