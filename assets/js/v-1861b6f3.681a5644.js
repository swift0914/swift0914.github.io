"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[137],{3771:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-1861b6f3",path:"/js/omg/",title:"Step-By-Step",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"1、如何正确的判断this的指向。",slug:"_1、如何正确的判断this的指向。",children:[{level:3,title:"1.全局中的this",slug:"_1-全局中的this",children:[]},{level:3,title:"2.是否有new绑定",slug:"_2-是否有new绑定",children:[]},{level:3,title:"3.函数是否通过 call  apply调用，或者使用了 bind 绑定，如果是 this 就指向绑定的对象。(显式绑定)",slug:"_3-函数是否通过-call-apply调用-或者使用了-bind-绑定-如果是-this-就指向绑定的对象。-显式绑定",children:[]},{level:3,title:"4.隐式绑定，函数的调用是通过某个对象上触发的，典型的表现 xxx.fn()",slug:"_4-隐式绑定-函数的调用是通过某个对象上触发的-典型的表现-xxx-fn",children:[]},{level:3,title:"5.默认绑定，无法应用其他规则时，通常是独立函数的调用。",slug:"_5-默认绑定-无法应用其他规则时-通常是独立函数的调用。",children:[]},{level:3,title:"6.箭头函数，this指向上层上下文中的this",slug:"_6-箭头函数-this指向上层上下文中的this",children:[]}]},{level:2,title:"2、如何使 a==1&&1==2&&a==3 成立",slug:"_2、如何使-a-1-1-2-a-3-成立",children:[{level:3,title:"valueOf",slug:"valueof",children:[]},{level:3,title:"数据劫持",slug:"数据劫持",children:[]}]},{level:2,title:"3、数组去重",slug:"_3、数组去重",children:[{level:3,title:"hash",slug:"hash",children:[]},{level:3,title:"Set",slug:"set",children:[]}]}],filePathRelative:"js/omg/README.md",git:{updatedTime:1615433296e3,contributors:[{name:"swift",email:"962498816@qq.com",commits:3}]}}},4701:(n,s,a)=>{a.r(s),a.d(s,{default:()=>t});const p=(0,a(6252).uE)('<h1 id="step-by-step" tabindex="-1"><a class="header-anchor" href="#step-by-step" aria-hidden="true">#</a> Step-By-Step</h1><h2 id="_1、如何正确的判断this的指向。" tabindex="-1"><a class="header-anchor" href="#_1、如何正确的判断this的指向。" aria-hidden="true">#</a> 1、如何正确的判断this的指向。</h2><blockquote><p>this 用一句话可以理解为 谁调用了它，this就指向谁。但是仅通过这句话有时还是无法准确的判断出this。this 的指向可以通过一下顺序进行判断。</p></blockquote><h3 id="_1-全局中的this" tabindex="-1"><a class="header-anchor" href="#_1-全局中的this" aria-hidden="true">#</a> 1.全局中的this</h3><p>浏览器环境下无论严格模式或非严格模式，this都指向 <code>window</code>。</p><h3 id="_2-是否有new绑定" tabindex="-1"><a class="header-anchor" href="#_2-是否有new绑定" aria-hidden="true">#</a> 2.是否有new绑定</h3><p>如果存在new绑定，this就指向new的对象。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Parent</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name\n<span class="token punctuation">}</span>\n<span class="token keyword">let</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Parent</span><span class="token punctuation">(</span><span class="token string">&#39;cxk&#39;</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="_3-函数是否通过-call-apply调用-或者使用了-bind-绑定-如果是-this-就指向绑定的对象。-显式绑定" tabindex="-1"><a class="header-anchor" href="#_3-函数是否通过-call-apply调用-或者使用了-bind-绑定-如果是-this-就指向绑定的对象。-显式绑定" aria-hidden="true">#</a> 3.函数是否通过 <code>call</code> <code>apply</code>调用，或者使用了 <code>bind</code> 绑定，如果是 this 就指向绑定的对象。<code>(显式绑定)</code></h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&#39;cxk&#39;</span>\n<span class="token punctuation">}</span>\n<span class="token function">info</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>\n<span class="token function">info</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>\n<span class="token function">info</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><div class="custom-container warning"><p class="custom-container-title">注意</p><p>如果<code>call</code> <code>apply</code> <code>bind</code> 中第一个参数传入的是 <code>null</code>或者<code>undefined</code>，非严格模式下，this指向 <code>window</code>。严格模式下 <code>this</code> 的值为传入的值 <code>null/undefined</code>。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">&#39;cxk&#39;</span>\n<span class="token function">info</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>\n<span class="token comment">// &#39;cxk&#39; 非严格模式</span>\n<span class="token comment">// 严格模式抛错   Uncaught TypeError: Cannot read property &#39;name&#39; of null</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div></div><h3 id="_4-隐式绑定-函数的调用是通过某个对象上触发的-典型的表现-xxx-fn" tabindex="-1"><a class="header-anchor" href="#_4-隐式绑定-函数的调用是通过某个对象上触发的-典型的表现-xxx-fn" aria-hidden="true">#</a> 4.隐式绑定，函数的调用是通过某个对象上触发的，典型的表现 <code>xxx.fn()</code></h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&#39;cxk&#39;</span><span class="token punctuation">,</span>\n  info\n<span class="token punctuation">}</span>\nobj<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// cxk</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="_5-默认绑定-无法应用其他规则时-通常是独立函数的调用。" tabindex="-1"><a class="header-anchor" href="#_5-默认绑定-无法应用其他规则时-通常是独立函数的调用。" aria-hidden="true">#</a> 5.默认绑定，无法应用其他规则时，通常是独立函数的调用。</h3><ul><li>非严格模式下为 window</li><li>严格模式下 undefined</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">&#39;cxk&#39;</span>\n<span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// cxk</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="_6-箭头函数-this指向上层上下文中的this" tabindex="-1"><a class="header-anchor" href="#_6-箭头函数-this指向上层上下文中的this" aria-hidden="true">#</a> 6.箭头函数，this指向上层上下文中的this</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&#39;cxk&#39;</span><span class="token punctuation">,</span>\n  <span class="token function-variable function">say</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">let</span> say <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// obj</span>\n\n<span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;swift&#39;</span> <span class="token punctuation">}</span>\n<span class="token keyword">let</span> say1 <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span>\n<span class="token function">say1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// person</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h2 id="_2、如何使-a-1-1-2-a-3-成立" tabindex="-1"><a class="header-anchor" href="#_2、如何使-a-1-1-2-a-3-成立" aria-hidden="true">#</a> 2、如何使 <code>a==1&amp;&amp;1==2&amp;&amp;a==3</code> 成立</h2><blockquote><p><code>==</code> 操作符左右两边类型不同 需要隐式类型转换。<code>a==1&amp;&amp;1==2&amp;&amp;a==3</code> 意味着不可能是基础类型。因此a只能是复杂类型 <code>object</code></p></blockquote><h3 id="valueof" tabindex="-1"><a class="header-anchor" href="#valueof" aria-hidden="true">#</a> valueOf</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">{</span>\n  valueOf<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n    <span class="token comment">// 利用闭包  i无法释放</span>\n    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">return</span> i<span class="token operator">++</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> a <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> a <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="数据劫持" tabindex="-1"><a class="header-anchor" href="#数据劫持" aria-hidden="true">#</a> 数据劫持</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span>\nObject<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>window<span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> i<span class="token operator">++</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> a <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> a <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="_3、数组去重" tabindex="-1"><a class="header-anchor" href="#_3、数组去重" aria-hidden="true">#</a> 3、数组去重</h2><h3 id="hash" tabindex="-1"><a class="header-anchor" href="#hash" aria-hidden="true">#</a> <code>hash</code></h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">unique</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> newArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> hash <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">||</span> len <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> arr\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>hash<span class="token punctuation">[</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      hash<span class="token punctuation">[</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n      newArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> newArr\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="set" tabindex="-1"><a class="header-anchor" href="#set" aria-hidden="true">#</a> <code>Set</code></h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">unique</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span>length\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">||</span> len <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> arr\n  <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div>',29),e={},t=(0,a(3744).Z)(e,[["render",function(n,s){return p}]])},3744:(n,s)=>{s.Z=(n,s)=>{for(const[a,p]of s)n[a]=p;return n}}}]);