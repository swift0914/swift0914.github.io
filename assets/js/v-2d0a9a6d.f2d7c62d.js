"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[781],{1064:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-2d0a9a6d",path:"/js/",title:"JS 数据类型",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"1、复制",slug:"_1、复制",children:[]},{level:2,title:"2、比较",slug:"_2、比较",children:[]},{level:2,title:"3、值传递和引用传递",slug:"_3、值传递和引用传递",children:[]},{level:2,title:"4、== 和 ===",slug:"_4、-和",children:[]},{level:2,title:"5、[] == ![]",slug:"_5、",children:[]}],filePathRelative:"js/README.md",git:{updatedTime:160249555e4,contributors:[{name:"swift",email:"962498816@qq.com",commits:4}]}}},968:(n,s,a)=>{a.r(s),a.d(s,{default:()=>o});const e=(0,a(6252).uE)('<h1 id="js-数据类型" tabindex="-1"><a class="header-anchor" href="#js-数据类型" aria-hidden="true">#</a> JS 数据类型</h1><blockquote><p>ECMAScript 规定了 JS 数据类型有 7 种，7 种有分为原始类型和引用类型</p></blockquote><ul><li>原始类型 <ul><li><code>Number</code> <code>String</code> <code>Null</code> <code>Undefined</code> <code>Boolean</code> <code>Symbol</code></li></ul></li><li>引用类型 <ul><li><code>Object</code></li></ul></li></ul><p>每一个 JS 变量都需要存放在内存中，内存分为<strong>栈内存</strong>、<strong>堆内存</strong>。</p><div class="custom-container tip"><p class="custom-container-title">解释</p><p><strong>原始类型在定义时被存放于栈内存中</strong><br><strong>引用类型的值存储在堆中，存储在栈内存中的引用地址指向堆内存中的值</strong></p></div><ul><li><p>栈内存特点：</p><ul><li>存储的值大小固定</li><li>空间较小</li><li>可以直接操作其保存的变量，运行效率高</li><li>由系统直接分配空间</li></ul></li><li><p>堆内存特点：</p><ul><li>存储的值大小不定，可动态调整</li><li>空间较大，运行效率低</li><li>需要使用引用地址来获取内部存储</li><li>由代码分配空间</li></ul></li></ul><h2 id="_1、复制" tabindex="-1"><a class="header-anchor" href="#_1、复制" aria-hidden="true">#</a> 1、复制</h2><blockquote><p>原始类型和引用类型的复制变现有所不同</p></blockquote><ul><li>原始类型复制</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">&quot;swift&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> name2 <span class="token operator">=</span> name<span class="token punctuation">;</span>\nname2 <span class="token operator">=</span> <span class="token string">&quot;蔡徐坤&quot;</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// swift;</span>\n<span class="token doc-comment comment">/**\n * 栈内存name变量对应的值swift，将name复制一份给name2，栈内存创建一个新空间存储你name2，\n * 虽然name和name2的值相同，但是两者是不同的存储位置，所以修改互不影响。\n **/</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><ul><li>引用类型复制</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&quot;swift&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> obj2 <span class="token operator">=</span> obj<span class="token punctuation">;</span>\nobj2<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;蔡徐坤&quot;</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 蔡徐坤</span>\n<span class="token doc-comment comment">/**\n * 当复制引用类型时，只是复制了引用类型存放在栈内存中的引用地址，\n * 复制出来的obj和obj2的引用地址都指向堆内存中的同一个对象，\n * 所以我们在修改其中一个对象的值时，另一个也会被影响。\n **/</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="_2、比较" tabindex="-1"><a class="header-anchor" href="#_2、比较" aria-hidden="true">#</a> 2、比较</h2><blockquote><p>两个变量的比较，原始类型和引用类型也有所不同</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">&quot;swift&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> name2 <span class="token operator">=</span> <span class="token string">&quot;swift&quot;</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name <span class="token operator">===</span> name2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n\n<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&quot;swift&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&quot;swift&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> obj3 <span class="token operator">=</span> obj<span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj <span class="token operator">===</span> obj2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj <span class="token operator">===</span> obj3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n<span class="token doc-comment comment">/**\n *  原始类型直接比较的值,所以为true\n *  引用类型比较的是引用地址，虽然两个对象属性值相同，但是被存储在不同的地址，所以false\n * /\n</span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h2 id="_3、值传递和引用传递" tabindex="-1"><a class="header-anchor" href="#_3、值传递和引用传递" aria-hidden="true">#</a> 3、值传递和引用传递</h2><blockquote><p>先明确一点：<code>ECMAScript</code>中所有的函数的参数都是按值传递的。</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">&quot;swift&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">function</span> <span class="token function">changeVal</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    name <span class="token operator">=</span> <span class="token string">&quot;蔡徐坤&quot;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token function">changeVal</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// swift</span>\n<span class="token doc-comment comment">/**\n * 结果表明函数参数传递的是变量的值，即值传递，\n * 如果结果为 蔡徐坤 ，函数的内部改变了传入的变量，\n * 那么说明函数参数传递的是引用，即引用传递。\n *\n **/</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&quot;swift&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">function</span> <span class="token function">changeVal</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    obj<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;蔡徐坤&quot;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token function">changeVal</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 蔡徐坤</span>\n<span class="token doc-comment comment">/**\n * 当函数参数是引用类型，同样的复制一个副本到局部变量，\n * 只不过引用类型复制的是引用地址而非堆中的值，\n * 在内部修改对象时，引用指向同一个对象，所以外部的也会被改变。\n * 并不代表这就是引用传递\n **/</span>\n\n<span class="token keyword">function</span> <span class="token function">changeValue</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    obj<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;唱跳rap&quot;</span><span class="token punctuation">;</span>\n    obj <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&quot;像极了蔡徐坤&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token function">changeValue</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 唱跳rap</span>\n<span class="token doc-comment comment">/**\n * 可见，函数参数传递的并不是变量的引用，而是变量拷贝的副本，\n * 当变量是原始类型时，这个副本就是值本身，\n * 当变量是引用类型时，这个副本是指向堆内存的地址。\n **/</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><div class="custom-container warning"><p class="custom-container-title">注意</p><p>上面的代码可能让你产生疑惑，是不是参数是引用类型就是引用传递呢？再次明确一点函数的参数都是按值传递的</p></div><h2 id="_4、-和" tabindex="-1"><a class="header-anchor" href="#_4、-和" aria-hidden="true">#</a> 4、== 和 ===</h2><div class="custom-container tip"><p class="custom-container-title">解释</p><ul><li><code>===</code> 没有类型转换，类型相同值相同才会返回true</li><li><code>==</code> 两者类型不同时，需要先类型转换</li></ul></div><ul><li>类型转换的具体步骤 <ul><li><ol><li>首先判断两者的类型是否相同，如果相同在比较值</li></ol></li><li><ol start="2"><li>如果类型不同，再进行类型的转换</li></ol></li><li><ol start="3"><li>如果判断的是 <code>null</code> 和 <code>undefined</code> , 返回 <code>true</code></li></ol></li><li><ol start="4"><li>判断两者是否是 <code>string</code> 和 <code>number</code>, 如果是先将string转换为number, 在做比较</li></ol></li><li><ol start="5"><li>判断其中一个是否为 <code>boolean</code>, 如果是先将boolean转换为number, 在做比较</li></ol></li><li><ol start="6"><li>如果其中一个为 <code>object</code>, 另一个为<code>string</code> <code>number</code> 或者 <code>symbol</code>, 则将object转换为原始类型在比较</li></ol></li></ul></li></ul><h2 id="_5、" tabindex="-1"><a class="header-anchor" href="#_5、" aria-hidden="true">#</a> 5、[] == ![]</h2><ul><li>步骤分析 <ul><li>1、<code>!</code> 的优先级高于<code>==</code>，所以先将 <code>![]</code> 进行计算</li><li>2、引用类型转为 <code>boolean</code> 结果都为 <code>true</code>，所有<code>![]</code> 为 <code>false</code></li><li>3、根据类型的转换步骤规则 <code>5</code>，一方是 <code>boolean</code> 需要将boolean转换为number，在做比较，false转为number对应的值为 <code>0</code></li><li>4、根据类型的转换步骤规则 <code>6</code>, 需要将引用类型转为原始类型在做比较，<code>[]</code> 转为 <code>number</code> 对应的值是 <code>0</code> (如果数组中仅存在一个数子，那么转为number就是这个数字，其余情况均为 <code>NaN</code> )</li><li>5、因此最终的比较结果为 <code>0 == 0</code>，结果为 <code>true</code></li></ul></li></ul>',25),p={},o=(0,a(3744).Z)(p,[["render",function(n,s){return e}]])},3744:(n,s)=>{s.Z=(n,s)=>{for(const[a,e]of s)n[a]=e;return n}}}]);