"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[642],{960:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t={key:"v-6e56ae0e",path:"/js/advanced/debounce_throttle.html",title:"防抖、节流函数",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"函数防抖(debounce)",slug:"函数防抖-debounce",children:[]},{level:2,title:"函数节流(throttle)",slug:"函数节流-throttle",children:[]}],filePathRelative:"js/advanced/debounce_throttle.md",git:{updatedTime:1602754821e3,contributors:[{name:"swift",email:"962498816@qq.com",commits:3}]}}},8227:(n,s,a)=>{a.r(s),a.d(s,{default:()=>e});const t=(0,a(6252).uE)('<h1 id="防抖、节流函数" tabindex="-1"><a class="header-anchor" href="#防抖、节流函数" aria-hidden="true">#</a> 防抖、节流函数</h1><h2 id="函数防抖-debounce" tabindex="-1"><a class="header-anchor" href="#函数防抖-debounce" aria-hidden="true">#</a> <strong>函数防抖(debounce)</strong></h2><blockquote><p>防抖和节流是都预防函数的对此调用，区别在于假设用户重复触发函数，每次触发的时间间隔小于预设时间，防抖函数只会执行一次，而节流函数会已一定的时间间隔调用一次函数。</p></blockquote><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>在事件触发 N 时间后在触发回调，如在期间再次触发则重新计算。</p></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> <span class="token function-variable function">debounce</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">fun<span class="token punctuation">,</span> wait</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span>\n        context <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">,</span>\n        args <span class="token operator">=</span> arguments<span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>timer<span class="token punctuation">)</span> <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n            <span class="token function">func</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span> wait<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="函数节流-throttle" tabindex="-1"><a class="header-anchor" href="#函数节流-throttle" aria-hidden="true">#</a> <strong>函数节流(throttle)</strong></h2><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>在规定时间内只触发一次函数。只有大于规定周期才会执行第二次</p></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> <span class="token function-variable function">throttle</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">fun<span class="token punctuation">,</span> wait</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> prev <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>\n        context <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">,</span>\n        args <span class="token operator">=</span> arguments<span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">let</span> now <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>now <span class="token operator">-</span> prev <span class="token operator">&gt;=</span> wait<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token function">fun</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            prev <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h4 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h4><ul><li>防抖和节流都是防止事件频繁触发，但是原理不一样。</li><li>防抖是某一段时间内只执行一次，而节流是间隔时间执行。</li></ul><h4 id="使用场景" tabindex="-1"><a class="header-anchor" href="#使用场景" aria-hidden="true">#</a> 使用场景</h4><ul><li><p>防抖</p><ul><li>输入框只有在用停止输入时采取进行<code>ajax</code>请求。</li><li><code>window</code>触发<code>resize</code>的时候，不断改变浏览器的大小，使用防抖只触发最后一次。</li></ul></li><li><p>节流</p><ul><li>监听滚动事件，例如上拉加载时使用节流，有效的节约请求次数。</li><li>鼠标、<code>touch</code>事件。</li></ul></li></ul>',12),p={},e=(0,a(3744).Z)(p,[["render",function(n,s){return t}]])},3744:(n,s)=>{s.Z=(n,s)=>{for(const[a,t]of s)n[a]=t;return n}}}]);