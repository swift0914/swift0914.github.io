"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[533],{1181:(e,l,t)=>{t.r(l),t.d(l,{data:()=>i});const i={key:"v-e33354f6",path:"/js/base/others.html",title:"JS 还有很多",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"JS 执行上下文",slug:"js-执行上下文",children:[]},{level:2,title:"闭包、及其应用场景",slug:"闭包、及其应用场景",children:[]},{level:2,title:"什么是原型链",slug:"什么是原型链",children:[]}],filePathRelative:"js/base/others.md",git:{updatedTime:1615433296e3,contributors:[{name:"swift",email:"962498816@qq.com",commits:3}]}}},7727:(e,l,t)=>{t.r(l),t.d(l,{default:()=>a});const i=(0,t(6252).uE)('<h1 id="js-还有很多" tabindex="-1"><a class="header-anchor" href="#js-还有很多" aria-hidden="true">#</a> JS 还有很多</h1><h2 id="js-执行上下文" tabindex="-1"><a class="header-anchor" href="#js-执行上下文" aria-hidden="true">#</a> JS 执行上下文</h2><blockquote><p>JS执行上下文就是js代码被解析和执行所在的环境。可以理解为存储js函数调用的栈结构，遵循先进后出的规则。</p></blockquote><ul><li>js是单线程的，所有的代码需要排队执行。</li><li>当浏览器开始执行全局代码时，创建一个全局的上下文并且压入上下文栈顶部。</li><li>每当执行一个函数是，都会创建一个函数的执行上下午并且压入上下文栈顶部，等待函数执行完毕，此函数的执行上下文会从上下文栈中出栈，等待垃圾回收。</li><li>js引擎只会访问上下文栈顶部的执行上下文。</li><li>全局只会存在一个全局上下文，浏览器关闭时出栈。</li></ul><h2 id="闭包、及其应用场景" tabindex="-1"><a class="header-anchor" href="#闭包、及其应用场景" aria-hidden="true">#</a> 闭包、及其应用场景</h2><blockquote><p>闭包是指有权访问另一个函数作用域中的变量，通常是函数内部创建另一个函数。</p></blockquote><ul><li>闭包的作用 <ul><li>封装私有变量</li><li>模仿块级作用域(ES5中没有块级作用域)</li><li>实现js的模块化</li></ul></li></ul><h2 id="什么是原型链" tabindex="-1"><a class="header-anchor" href="#什么是原型链" aria-hidden="true">#</a> 什么是原型链</h2><blockquote><p>原型链主要解决了继承的问题</p></blockquote><div class="custom-container tip"><p class="custom-container-title">理解</p><p>每个对象都拥有原型对象，通过 <code>__proto__</code> 指针指向构造函数的原型对象，可以在原型对象中获取到公共的属性和方法，同样原型对象也有 <code>__proto__</code> 属性指向上层的原型对象，最终将指向 <code>null</code> ，<code>Object.prototype.__proto__</code> 指向 <code>null</code>，这种链式的关系形成了 <code>原型链</code>。</p></div><p><img src="/prototype_chain.png" alt="prototype_chain"></p>',11),o={},a=(0,t(3744).Z)(o,[["render",function(e,l){return i}]])},3744:(e,l)=>{l.Z=(e,l)=>{for(const[t,i]of l)e[t]=i;return e}}}]);