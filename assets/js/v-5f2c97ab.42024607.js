"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[507],{2248:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-5f2c97ab",path:"/js/advanced/proxy.html",title:"双向绑定",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"实现双向绑定 Proxy 和 Object.definePrototype 相比的优劣。",slug:"实现双向绑定-proxy-和-object-defineprototype-相比的优劣。",children:[{level:3,title:"Object.definePrototype 实现双向绑定",slug:"object-defineprototype-实现双向绑定",children:[]},{level:3,title:"Proxy 实现双向绑定",slug:"proxy-实现双向绑定",children:[]}]},{level:2,title:"对于数组的劫持",slug:"对于数组的劫持",children:[]}],filePathRelative:"js/advanced/proxy.md",git:{updatedTime:1615433296e3,contributors:[{name:"swift",email:"962498816@qq.com",commits:3}]}}},3645:(n,s,a)=>{a.r(s),a.d(s,{default:()=>e});const p=(0,a(6252).uE)('<h1 id="双向绑定" tabindex="-1"><a class="header-anchor" href="#双向绑定" aria-hidden="true">#</a> 双向绑定</h1><h2 id="实现双向绑定-proxy-和-object-defineprototype-相比的优劣。" tabindex="-1"><a class="header-anchor" href="#实现双向绑定-proxy-和-object-defineprototype-相比的优劣。" aria-hidden="true">#</a> 实现双向绑定 <code>Proxy</code> 和 <code>Object.definePrototype</code> 相比的优劣。</h2><ul><li>1、<code>Object.definePrototype</code> 只可以劫持对象的某个属性，劫持属性的getter和setter方法，再对象属性发生变化时进行特定的操作。<code>Proxy</code> 可以劫持整个对象。</li><li>2、<code>Proxy</code> 返回一个被劫持的全新的对象，我们处理新对象就可以，而 <code>Object.definePrototype</code> 是在原有对象上直接修改。</li><li>3、<code>Object.definePrototype</code> 不支持对数组的劫持。</li><li>4、<code>Object.definePrototype</code> 兼容性优于 <code>Proxy</code>。</li></ul><h3 id="object-defineprototype-实现双向绑定" tabindex="-1"><a class="header-anchor" href="#object-defineprototype-实现双向绑定" aria-hidden="true">#</a> <code>Object.definePrototype</code> 实现双向绑定</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> temp <span class="token operator">=</span> <span class="token string">&quot;swift&quot;</span><span class="token punctuation">;</span>\nObject<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;取值成功&#39;</span><span class="token punctuation">)</span>\n    <span class="token keyword">return</span> temp\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token function">set</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;设置值成功&#39;</span><span class="token punctuation">)</span>\n    temp <span class="token operator">=</span> value\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\nobj<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;蔡徐坤&#39;</span> <span class="token comment">// 设置值成功</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>name<span class="token punctuation">)</span>  <span class="token comment">// 取值成功</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h3 id="proxy-实现双向绑定" tabindex="-1"><a class="header-anchor" href="#proxy-实现双向绑定" aria-hidden="true">#</a> <code>Proxy</code> 实现双向绑定</h3><div class="custom-container tip"><p class="custom-container-title">注意</p><p>proxy 会劫持整个对象，当读取或者修改某个属性值的时候，都会被劫持到。需要注意的是，复杂类型只是监听了引用地址，而不是值，如果引用地址没有改变，是不会触发 <code>set</code> 的。</p></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&#39;蔡徐坤&#39;</span><span class="token punctuation">,</span>\n  hobbits<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;chang&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;jump&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;rap&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  info<span class="token operator">:</span> <span class="token punctuation">{</span>\n    age<span class="token operator">:</span> <span class="token number">3</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  <span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;proxy 取值成功&#39;</span><span class="token punctuation">)</span>\n    <span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">===</span> length<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span> <span class="token comment">// 如果是数组的长度 直接返回</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;proxy 设置值成功&#39;</span><span class="token punctuation">)</span>\n    <span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> val<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\np<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;swift&#39;</span> <span class="token comment">// 触发 set</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">// swift</span>\np<span class="token punctuation">.</span>info<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token string">&#39;222&#39;</span> <span class="token comment">// 不会触发 set</span>\np<span class="token punctuation">.</span>hobbits<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;photography&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 不会触发 set</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>info<span class="token punctuation">.</span>age<span class="token punctuation">)</span> <span class="token comment">// 222</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><h2 id="对于数组的劫持" tabindex="-1"><a class="header-anchor" href="#对于数组的劫持" aria-hidden="true">#</a> 对于数组的劫持</h2><blockquote><p><code>Object.definePrototype</code> 可以将数组的索引作为属性进行劫持，但是仅仅支持 array[i] 进行才做，不支持数组的任何方法。</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> temp<span class="token punctuation">;</span>\nObject<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token string">&#39;0&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;取值成功&#39;</span><span class="token punctuation">)</span>\n    <span class="token keyword">return</span> temp\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token function">set</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;设置值成功&#39;</span><span class="token punctuation">)</span>\n    temp <span class="token operator">=</span> val\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\narr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token comment">// 设置值成功</span>\narr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// 不会被劫持</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><blockquote><p><code>Proxy</code> 可以监听到数组的变化，支持数组的方法。需要注意的是数组的变化触发 get 和 set可能不止一次，如果需要可以根据 key 来判断。</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;chang&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;tiao&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;rap&#39;</span><span class="token punctuation">]</span>\n<span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  <span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;取值成功&#39;</span><span class="token punctuation">)</span>\n    <span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;设置值成功&#39;</span><span class="token punctuation">)</span>\n    <span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> val<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token comment">// p.splice(0, 1) // 触发了get和set</span>\np<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;chi&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 触发get和set</span>\np<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// 触发get slice不会改变原数组</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div>',13),t={},e=(0,a(3744).Z)(t,[["render",function(n,s){return p}]])},3744:(n,s)=>{s.Z=(n,s)=>{for(const[a,p]of s)n[a]=p;return n}}}]);