"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[934],{9225:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-744e35e2",path:"/vue/",title:"Vue 自测",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"1、说说你对 SPA 单页面的理解，它的优缺点分别是什么？",slug:"_1、说说你对-spa-单页面的理解-它的优缺点分别是什么",children:[]},{level:2,title:"2、v-show 与 v-if 有什么区别？",slug:"_2、v-show-与-v-if-有什么区别",children:[]},{level:2,title:"3、Class 与 Style 如何动态绑定？",slug:"_3、class-与-style-如何动态绑定",children:[]},{level:2,title:"4、怎样理解 Vue 的单向数据流？",slug:"_4、怎样理解-vue-的单向数据流",children:[]},{level:2,title:"5、computed 和 watch 的区别和运用的场景？",slug:"_5、computed-和-watch-的区别和运用的场景",children:[]},{level:2,title:"6、直接给一个数组项赋值，Vue 能检测到变化吗？",slug:"_6、直接给一个数组项赋值-vue-能检测到变化吗",children:[]},{level:2,title:"7、谈谈你对 Vue 生命周期的理解？",slug:"_7、谈谈你对-vue-生命周期的理解",children:[]},{level:2,title:"8、在哪个生命周期内调用异步请求？",slug:"_8、在哪个生命周期内调用异步请求",children:[]},{level:2,title:"9、在什么阶段才能访问操作 DOM？",slug:"_9、在什么阶段才能访问操作-dom",children:[]},{level:2,title:"10、组件中 data 为什么是一个函数？",slug:"_10、组件中-data-为什么是一个函数",children:[]},{level:2,title:"11、v-model 实现机制",slug:"_11、v-model-实现机制",children:[]},{level:2,title:"12、Vue 组件间通信有哪几种方式？",slug:"_12、vue-组件间通信有哪几种方式",children:[]},{level:2,title:"13、Vue SSR",slug:"_13、vue-ssr",children:[]},{level:2,title:"14、Vue 响应式原理",slug:"_14、vue-响应式原理",children:[{level:3,title:"如何监听数据的变化",slug:"如何监听数据的变化",children:[]},{level:3,title:"为什么收集依赖，如何收集？",slug:"为什么收集依赖-如何收集",children:[]},{level:3,title:"收集依赖",slug:"收集依赖",children:[]}]}],filePathRelative:"vue/README.md",git:{updatedTime:1604564878e3,contributors:[{name:"swift",email:"962498816@qq.com",commits:7}]}}},9334:(n,s,a)=>{a.r(s),a.d(s,{default:()=>d});var p=a(6252);const t=(0,p.uE)('<h1 id="vue-自测" tabindex="-1"><a class="header-anchor" href="#vue-自测" aria-hidden="true">#</a> Vue 自测</h1><h2 id="_1、说说你对-spa-单页面的理解-它的优缺点分别是什么" tabindex="-1"><a class="header-anchor" href="#_1、说说你对-spa-单页面的理解-它的优缺点分别是什么" aria-hidden="true">#</a> 1、说说你对 SPA 单页面的理解，它的优缺点分别是什么？</h2><h4 id="优点" tabindex="-1"><a class="header-anchor" href="#优点" aria-hidden="true">#</a> 优点</h4><ul><li>用户体验较好，内容的改变不会导致整个页面的刷新，避免了没必要的重新渲染。</li><li>减小对服务器的压力。</li><li>前后端可以分离开发，开发专注交互、后端负责数据。</li></ul><h4 id="缺点" tabindex="-1"><a class="header-anchor" href="#缺点" aria-hidden="true">#</a> 缺点</h4><ul><li>首屏加载较慢，需要在加载页面是要将<code>JavaScript</code>、<code>Css</code>统一加载。</li><li>无法使用浏览器前进、后退功能，由于单页面应用只可使用<code>vue-router</code>、<code>react-router</code>等来实现页面内容的切换。</li><li>SEO 难度较大，由于所有内容都在一个页面根据数据的变化而变化。</li></ul><h2 id="_2、v-show-与-v-if-有什么区别" tabindex="-1"><a class="header-anchor" href="#_2、v-show-与-v-if-有什么区别" aria-hidden="true">#</a> 2、v-show 与 v-if 有什么区别？</h2><p><code>v-if</code>是真正的条件渲染，会根据数据的变化而创建和销毁。<br><code>v-show</code>则简单很多，无论条件是什么都会被渲染，仅仅只切换元素的<code>display</code>属性。</p><h2 id="_3、class-与-style-如何动态绑定" tabindex="-1"><a class="header-anchor" href="#_3、class-与-style-如何动态绑定" aria-hidden="true">#</a> 3、Class 与 Style 如何动态绑定？</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token operator">&lt;</span>div <span class="token operator">:</span><span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;{&#39;active&#39;:isActive}&quot;</span> <span class="token operator">:</span>style<span class="token operator">=</span><span class="token string">&quot;{&#39;height&#39;:height+&#39;px&#39;}&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>\n\n<span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">return</span><span class="token punctuation">{</span>\n        isActive<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n        height<span class="token operator">:</span> <span class="token number">100</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="_4、怎样理解-vue-的单向数据流" tabindex="-1"><a class="header-anchor" href="#_4、怎样理解-vue-的单向数据流" aria-hidden="true">#</a> 4、怎样理解 Vue 的单向数据流？</h2><p>所有的<code>prop</code>都使得父子组件形成了<strong>自上向下的单向绑定</strong>，这样防止子组件意外的改变了父组件的值，子组件可通过<code>$emit</code>派发自定义事件从而修改父组件的值。</p><blockquote><p>两次试图改变 prop 的场景</p></blockquote><ul><li><code>prop</code>作为子组件状态的初始值</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>props<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;initialCounter&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token function-variable function">data</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    counter<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>initialCounter\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><ul><li>子组件定义计算属性处理<code>prop</code></li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>props<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;size&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\ncomputed<span class="token operator">:</span> <span class="token punctuation">{</span>\n  <span class="token function-variable function">normalizedSize</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>size<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="_5、computed-和-watch-的区别和运用的场景" tabindex="-1"><a class="header-anchor" href="#_5、computed-和-watch-的区别和运用的场景" aria-hidden="true">#</a> 5、computed 和 watch 的区别和运用的场景？</h2><p><code>computed</code>：<strong>计算属性</strong>，依赖于其他值，具有缓存只有依赖的值发生变化是<strong>计算属性</strong>才会重新计算。<br><code>watch</code>：<strong>观察者</strong>，某些数据在发生变化是做出的后续操作。</p><blockquote><p>运用场景</p></blockquote><ul><li>当我们需要对值进行计算无多余操作时，使用<code>computed</code>。</li><li>在数据变化时执行异步操作或者较大开销的操作事使用<code>watch</code>。</li></ul><h2 id="_6、直接给一个数组项赋值-vue-能检测到变化吗" tabindex="-1"><a class="header-anchor" href="#_6、直接给一个数组项赋值-vue-能检测到变化吗" aria-hidden="true">#</a> 6、直接给一个数组项赋值，Vue 能检测到变化吗？</h2><p><strong><code>vue</code>无法检测到数组下表赋值、数据长度修改</strong>，通过<code>$set</code>来实现。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$set</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">,</span> indexOfItem<span class="token punctuation">,</span> newValue<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="_7、谈谈你对-vue-生命周期的理解" tabindex="-1"><a class="header-anchor" href="#_7、谈谈你对-vue-生命周期的理解" aria-hidden="true">#</a> 7、谈谈你对 Vue 生命周期的理解？</h2><table><thead><tr><th>生命周期</th><th style="text-align:center;">描述</th></tr></thead><tbody><tr><td>beforeCreate</td><td style="text-align:center;">实例在被创建之前</td></tr><tr><td>created</td><td style="text-align:center;">实例被创建了，属性绑定但真实 DOM 还未生成</td></tr><tr><td>beforeMount</td><td style="text-align:center;">实例被挂载之前，render 函数被调用</td></tr><tr><td>mounted</td><td style="text-align:center;">实例被挂载</td></tr><tr><td>beforeUpdate</td><td style="text-align:center;">组件数据更新前，虚拟 DOM 在打补丁前</td></tr><tr><td>update</td><td style="text-align:center;">组件数据更新之后</td></tr><tr><td>beforeDestory</td><td style="text-align:center;">组件被销毁前</td></tr><tr><td>destoryed</td><td style="text-align:center;">组件被销毁</td></tr></tbody></table><h2 id="_8、在哪个生命周期内调用异步请求" tabindex="-1"><a class="header-anchor" href="#_8、在哪个生命周期内调用异步请求" aria-hidden="true">#</a> 8、在哪个生命周期内调用异步请求？</h2><p>在<code>creaded</code>、<code>beforeMounted</code>、<code>mounted</code>都可以异步请求对<code>data</code>进行赋值，习惯在<code>created</code>中调用，优点：</p><ul><li><code>created</code>最快执行减少了 loading 的时间。</li><li>服务端渲染中没有<code>beforeMounted</code>、<code>mounted</code>，这样可以保持一致性。</li></ul><h2 id="_9、在什么阶段才能访问操作-dom" tabindex="-1"><a class="header-anchor" href="#_9、在什么阶段才能访问操作-dom" aria-hidden="true">#</a> 9、在什么阶段才能访问操作 DOM？</h2><p><code>mounted</code>被调用前，模板被挂载到了页面，在<code>mounted</code>中可以操作 DOM</p><blockquote><p>生命周期示意图 <img src="/1" alt="avatar"></p></blockquote><h2 id="_10、组件中-data-为什么是一个函数" tabindex="-1"><a class="header-anchor" href="#_10、组件中-data-为什么是一个函数" aria-hidden="true">#</a> 10、组件中 data 为什么是一个函数？</h2><blockquote><p>为什么组件中的 data 必须是一个函数，然后 return 一个对象，而 new Vue 实例里，data 可以直接是一个对象？</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// data</span>\n<span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n\tmessage<span class="token operator">:</span> <span class="token string">&quot;子组件&quot;</span><span class="token punctuation">,</span>\n\tchildName<span class="token operator">:</span><span class="token keyword">this</span><span class="token punctuation">.</span>name\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// new Vue</span>\n<span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  el<span class="token operator">:</span> <span class="token string">&#39;#app&#39;</span><span class="token punctuation">,</span>\n  router<span class="token punctuation">,</span>\n  template<span class="token operator">:</span> <span class="token string">&#39;&lt;App/&gt;&#39;</span><span class="token punctuation">,</span>\n  components<span class="token operator">:</span> <span class="token punctuation">{</span>App<span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>组件是用来被复用的，对象是引用类型，<code>data</code>是对象的话可以能导致多处复用的组件数据混乱，函数则每个复用的组件都维护一个单独的拷贝，互不影响。<br><code>new Vue</code>的实例不会被复用。</p><h2 id="_11、v-model-实现机制" tabindex="-1"><a class="header-anchor" href="#_11、v-model-实现机制" aria-hidden="true">#</a> 11、v-model 实现机制</h2><p>v-model 会把关联的数据动态的绑定到<code>input</code>的<code>value</code>属性上，并且监听表单元素的<code>input</code>事件，<code>v-model</code>绑定的响应式数据变化时，表单的<code>value</code>值同步变化，表单输入变化时<code>input</code>事件触发，回调会把最新值更新到<code>v-model</code>绑定的响应式数据。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">&quot;text&quot;</span> v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">&quot;msg&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>\n<span class="token comment">// 相当于</span>\n<span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">&quot;text&quot;</span> @input<span class="token operator">=</span><span class="token string">&quot;input&quot;</span> <span class="token operator">:</span>value<span class="token operator">=</span><span class="token string">&quot;msg&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="_12、vue-组件间通信有哪几种方式" tabindex="-1"><a class="header-anchor" href="#_12、vue-组件间通信有哪几种方式" aria-hidden="true">#</a> 12、Vue 组件间通信有哪几种方式？</h2><p>vue 组件通信一般包含 父子组件、兄弟组件、隔代组件通信。</p><ul><li><strong><code>props</code>/<code>$emit</code>父子组件通信</strong></li><li><strong><code>ref</code>与<code>$parent</code>/<code>$children</code>父子组件通信</strong><ul><li><code>ref</code>定义在<code>dom</code>则指向<code>dom元素</code>，<code>ref</code>定义在子组件上，引用就指向组件实例。</li><li>通过<code>$parent</code>访问父组件，<code>$children</code>访问子组件。</li></ul></li><li><strong><code>EventBus （$emit / $on）</code>父子组件、兄弟组件、隔代组件通信</strong><ul><li><code>$emit</code>触发事件，<code>$on</code>监听。</li></ul></li><li><strong><code>Vuex</code> 适用于 父子、隔代、兄弟组件通信</strong></li></ul><h2 id="_13、vue-ssr" tabindex="-1"><a class="header-anchor" href="#_13、vue-ssr" aria-hidden="true">#</a> 13、Vue SSR</h2><blockquote><p>Vue.js 是构建客户端应用程序的框架。默认情况下，可以在浏览器中输出 Vue 组件，进行生成 DOM 和操作 DOM。然而，也可以将同一个组件渲染为服务端的 HTML 字符串，将它们直接发送到浏览器，最后将这些静态标记&quot;激活&quot;为客户端上完全可交互的应用程序。</p></blockquote><ul><li><strong>SSR 优点</strong><ul><li>更好的<code>SEO</code>，<code>SPA</code>单页面应用通过网络请求获取数据才可展示，爬虫系统不会等待<code>Ajax</code>请求完成，而服务端渲染是服务器返回渲染好的内容。</li><li>首屏相应时间更快，单页面应用需要等待编译好的<code>JS</code>加载完成，才进行页面的渲染，<code>SSR</code>直接构建服务端渲染好的数据。</li></ul></li><li><strong>SSR 缺点</strong><ul><li>生命周期函数在服务端只支持<code>beforCreate</code>、<code>created</code>，导致某些第三方库需要特殊处理，应用在服务端必须部署在<code>Node Js</code>服务上。</li><li>服务端负载大于普通的静态服务。</li></ul></li></ul><h2 id="_14、vue-响应式原理" tabindex="-1"><a class="header-anchor" href="#_14、vue-响应式原理" aria-hidden="true">#</a> 14、Vue 响应式原理</h2><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>数据发生变化，会重新渲染试图，这就是 Vue 的响应式。如何做到？</p><ul><li><p>过程</p><ul><li>监听数据的变化（数据劫持）</li><li>收集视图依赖的数据</li><li>发布订阅模式，完成更新</li></ul></li></ul></div><h3 id="如何监听数据的变化" tabindex="-1"><a class="header-anchor" href="#如何监听数据的变化" aria-hidden="true">#</a> 如何监听数据的变化</h3>',48),e={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty",target:"_blank",rel:"noopener noreferrer"},o=(0,p._)("code",null,"Object.defineProperty",-1),c=(0,p.uE)('<blockquote><p><code>Vue</code>通过对对象设置<code>getter/setter</code>方法来监听数据的变化，<code>getter</code>来进行依赖收集，<code>setter</code>方法时观察者，在数据变化的实话同事每一个订阅者从而实现视图的更新。 不多废话 上才艺。</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n    name<span class="token operator">:</span> <span class="token string">&quot;swift&quot;</span><span class="token punctuation">,</span>\n    desc<span class="token operator">:</span> <span class="token punctuation">{</span>\n        txt<span class="token operator">:</span> <span class="token string">&quot;写起代码像蔡徐坤&quot;</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;数据变化，渲染视图&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">observe</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>obj <span class="token operator">||</span> <span class="token keyword">typeof</span> obj <span class="token operator">!==</span> <span class="token string">&quot;object&quot;</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>\n    <span class="token comment">// 使对象变成可观察的</span>\n    Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 遍历数据所有的key</span>\n        <span class="token function">defineReactive</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> key<span class="token punctuation">,</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">function</span> <span class="token function">defineReactive</span><span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> key<span class="token punctuation">,</span> val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">observe</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 递归子属性</span>\n        Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n            <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;get &quot;</span><span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 监听</span>\n                <span class="token keyword">return</span> val<span class="token punctuation">;</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n            <span class="token function">set</span><span class="token punctuation">(</span>newVal<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token function">observe</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//如果赋值是一个对象，也要递归子属性</span>\n                <span class="token keyword">if</span> <span class="token punctuation">(</span>newVal <span class="token operator">!==</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;set &quot;</span><span class="token punctuation">,</span> newVal<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                    val <span class="token operator">=</span> newVal<span class="token punctuation">;</span>\n                    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token function">observe</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>\nobj<span class="token punctuation">.</span>name<span class="token punctuation">;</span> <span class="token comment">// get  swift</span>\nobj<span class="token punctuation">.</span>desc<span class="token punctuation">.</span>txt <span class="token operator">=</span> <span class="token string">&quot;菜的不行许多时候还犯困&quot;</span><span class="token punctuation">;</span> <span class="token comment">//set  菜的不行许多时候还犯困</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br></div></div><p>上段代码通过<code>observe</code>方法遍历<code>obj</code>的每个属性，再使用<code>defineReactive</code>对每个属性进行侦测。递归调用<code>observe</code>每个子属性。</p><div class="custom-container warning"><p class="custom-container-title">WARNING</p><ul><li>无法检测到对象属性的添加或删除(<code>vue</code> 提供了 <code>this.$set(obj, key, val)</code>)</li><li>不能监听数组的变化</li></ul></div>',4),l={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy",target:"_blank",rel:"noopener noreferrer"},u=(0,p._)("code",null,"ES6 Proxy",-1),i=(0,p.uE)('<blockquote><p><code>Proxy</code>是<code>ES6</code>新增特性，<strong>proxy 的代理针对整个对象，而非对象某个属性</strong>，所以无需遍历每个属性进行监听，如果有深层结构还是需要通过递归，<strong>此外 Proxy 支持代理数组的变化</strong>。</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n    name<span class="token operator">:</span> <span class="token string">&quot;swift&quot;</span><span class="token punctuation">,</span>\n    desc<span class="token operator">:</span> <span class="token punctuation">{</span>\n        txt<span class="token operator">:</span> <span class="token string">&quot;写起代码像蔡徐坤&quot;</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> handler <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> target<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">&quot;object&quot;</span> <span class="token operator">&amp;&amp;</span> target<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>target<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;set &quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> key<span class="token punctuation">,</span> val <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>proxy<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// swift</span>\nproxy<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">27</span><span class="token punctuation">;</span> <span class="token comment">//  set  {key: &quot;age&quot;, val: 27}  支持新增属性</span>\nproxy<span class="token punctuation">.</span>desc<span class="token punctuation">.</span>txt <span class="token operator">=</span> <span class="token string">&quot;菜的不行许多时候还犯困&quot;</span><span class="token punctuation">;</span> <span class="token comment">// set  {key: &quot;txt&quot;, val: &quot;菜的不行许多时候还犯困&quot;}  支持深层</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div>',2),r=(0,p.uE)('<h3 id="为什么收集依赖-如何收集" tabindex="-1"><a class="header-anchor" href="#为什么收集依赖-如何收集" aria-hidden="true">#</a> 为什么收集依赖，如何收集？</h3><blockquote><ul><li>一个数据可能在多个视图被使用，只能通过依赖的收集才能明确哪些地方使用了依赖的数据，以及数据更新时派发更新。</li><li>如何实现依赖的收集？<strong>事件订阅发布模式</strong>，其包含两个重要角色<strong>Dep 订阅者、Watcher 观察者</strong>。</li></ul></blockquote><h4 id="dep-的简单实现" tabindex="-1"><a class="header-anchor" href="#dep-的简单实现" aria-hidden="true">#</a> Dep 的简单实现</h4><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>收集依赖需要有存储依赖的空间，所有创建 Dep 类，用来存储收集依赖、删除依赖以及向依赖发送更新消息。</p></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>Class Dep<span class="token punctuation">{</span>\n    constructor<span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>subs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 初始化watcher对象数组</span>\n    <span class="token punctuation">}</span>\n    <span class="token function">addSub</span><span class="token punctuation">(</span><span class="token parameter">sub</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// 所有的watcher对象</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>subs<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>sub<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// 通知所有watcher更新</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>subs<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">sub</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n            sub<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><blockquote><p>以上代码主要做两件事：</p><ul><li>\b 收集所有的 watcher。</li><li>数据变化时通知所有的 watcher 更新视图。</li></ul></blockquote><h4 id="watcher-的简单实现" tabindex="-1"><a class="header-anchor" href="#watcher-的简单实现" aria-hidden="true">#</a> Watcher 的简单实现</h4><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Watcher</span> <span class="token punctuation">{</span>\n    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> key<span class="token punctuation">,</span> cb</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 将 Dep.target 指向自己</span>\n        <span class="token comment">// 然后触发属性的 getter 添加监听</span>\n        <span class="token comment">// 最后将 Dep.target 置空</span>\n        Dep<span class="token punctuation">.</span>target <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>cb <span class="token operator">=</span> cb<span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>obj <span class="token operator">=</span> obj<span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>key <span class="token operator">=</span> key<span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>\n        Dep<span class="token punctuation">.</span>target <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 获得新值</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>obj<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>\n        <span class="token comment">// 我们定义一个 cb 函数，这个函数用来模拟视图更新，调用它即代表更新视图</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">cb</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h3 id="收集依赖" tabindex="-1"><a class="header-anchor" href="#收集依赖" aria-hidden="true">#</a> 收集依赖</h3><blockquote><p>所谓的依赖，其实就是 Watcher。至于如何收集依赖，总结起来就一句话，**在 getter 中收集依赖，在 setter 中触发依赖。**先收集依赖，即把用到该数据的地方收集起来，然后等属性发生变化时，把之前收集好的依赖循环触发一遍就行了。</p></blockquote><p>最后我们对 defineReactive 函数进行改造，在自定义函数中添加依赖收集和派发更新相关的代码,实现了一个简易的数据响应式。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">observe</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>obj <span class="token operator">||</span> <span class="token keyword">typeof</span> obj <span class="token operator">!==</span> <span class="token string">&quot;object&quot;</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>\n    <span class="token comment">// 使对象变成可观察的</span>\n    Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 遍历数据所有的key</span>\n        <span class="token function">defineReactive</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> key<span class="token punctuation">,</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">function</span> <span class="token function">defineReactive</span><span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> key<span class="token punctuation">,</span> val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">observe</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 递归子属性</span>\n        Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n            <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;get &quot;</span><span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 监听</span>\n                <span class="token comment">// 将 Watcher 添加到订阅</span>\n                <span class="token keyword">if</span> <span class="token punctuation">(</span>Dep<span class="token punctuation">.</span>target<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    dp<span class="token punctuation">.</span><span class="token function">addSub</span><span class="token punctuation">(</span>Dep<span class="token punctuation">.</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 新增</span>\n                <span class="token punctuation">}</span>\n                <span class="token keyword">return</span> val<span class="token punctuation">;</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n            <span class="token function">set</span><span class="token punctuation">(</span>newVal<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token function">observe</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//如果赋值是一个对象，也要递归子属性</span>\n                <span class="token keyword">if</span> <span class="token punctuation">(</span>newVal <span class="token operator">!==</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;set &quot;</span><span class="token punctuation">,</span> newVal<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                    val <span class="token operator">=</span> newVal<span class="token punctuation">;</span>\n                    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                    <span class="token comment">// 执行 watcher 的 update 方法</span>\n                    dp<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//新增</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name">Vue</span> <span class="token punctuation">{</span>\n    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>_data <span class="token operator">=</span> options<span class="token punctuation">.</span>data<span class="token punctuation">;</span>\n        <span class="token function">observer</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_data<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">/* 新建一个Watcher观察者对象，这时候Dep.target会指向这个Watcher对象 */</span>\n        <span class="token keyword">new</span> <span class="token class-name">Watcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;模拟视图渲染&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br></div></div>',12),k={},d=(0,a(3744).Z)(k,[["render",function(n,s){const a=(0,p.up)("OutboundLink");return(0,p.wg)(),(0,p.iD)(p.HY,null,[t,(0,p._)("ul",null,[(0,p._)("li",null,[(0,p._)("p",null,[(0,p._)("strong",null,[(0,p._)("a",e,[o,(0,p.Wm)(a)])])]),c]),(0,p._)("li",null,[(0,p._)("p",null,[(0,p._)("strong",null,[(0,p._)("a",l,[u,(0,p.Wm)(a)])])]),i])]),r],64)}]])},3744:(n,s)=>{s.Z=(n,s)=>{for(const[a,p]of s)n[a]=p;return n}}}]);